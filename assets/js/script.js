// Module 1 & 2 Context: Demonstrating Java/OOP Concepts via JavaScript Analogues
// The structure of data and functions here mirrors an OOP design (Classes, Objects, Methods)

let contacts = []; // Local store for contacts (Simulates database persistence)
let currentViewMode = 'list'; // 'list' or 'grid'

/**
 * Generates a unique ID (analogous to a primary key auto-generated by a database).
 * @returns {string} A unique ID string.
 */
const generateUniqueId = () => Date.now().toString(36) + Math.random().toString(36).substring(2);

// --- Simulated API Interaction (Module 6: Frontend/Java Integration) ---

/**
 * Saves contacts to localStorage for persistence.
 */
function saveContacts() {
    localStorage.setItem('contacts', JSON.stringify(contacts));
}

/**
 * Simulates fetching all contacts from the Java API endpoint (/api/contacts).
 * Loads from localStorage if available, otherwise uses dummy data.
 * @returns {Promise<Array>} A promise resolving to the list of contacts.
 */
async function fetchContacts() {
    console.log('API Call: GET /api/contacts - Simulating Java Backend');
    // In a real application: const response = await fetch('/api/contacts'); return response.json();

    // Load from localStorage if available
    const stored = localStorage.getItem('contacts');
    if (stored) {
        contacts = JSON.parse(stored);
    } else {
        // Dummy Data for initial load (removed)
        contacts = [];
    }
    return Promise.resolve(contacts);
}

/**
 * Simulates creating a new contact via the Java API endpoint (POST /api/contacts).
 * @param {object} contactData - The new contact data.
 * @returns {Promise<object>} The saved contact object with generated ID.
 */
async function apiAddContact(contactData) {
    console.log('API Call: POST /api/contacts - Simulating Java Backend');
    // In a real application: await fetch('/api/contacts', { method: 'POST', body: JSON.stringify(contactData) });
    const newContact = { ...contactData, id: generateUniqueId() };
    contacts.push(newContact);
    saveContacts(); // Persist to localStorage
    return Promise.resolve(newContact);
}

/**
 * Simulates updating an existing contact (PUT /api/contacts/{id}).
 * @param {object} contactData - The updated contact data including ID.
 * @returns {Promise<object>} The updated contact object.
 */
async function apiUpdateContact(contactData) {
    console.log(`API Call: PUT /api/contacts/${contactData.id} - Simulating Java Backend`);
    const index = contacts.findIndex(c => c.id === contactData.id);
    if (index !== -1) {
        contacts[index] = { ...contacts[index], ...contactData };
        saveContacts(); // Persist to localStorage
        return Promise.resolve(contacts[index]);
    }
    return Promise.reject(new Error('Contact not found'));
}

/**
 * Simulates deleting a contact (DELETE /api/contacts/{id}). (CRUD: Delete)
 * @param {string} id - The ID of the contact to delete.
 * @returns {Promise<void>}
 */
async function apiDeleteContact(id) {
    console.log(`API Call: DELETE /api/contacts/${id} - Simulating Java Backend`);
    contacts = contacts.filter(c => c.id !== id);
    saveContacts(); // Persist to localStorage
    return Promise.resolve();
}

// --- Core Frontend Logic (Module 4: JavaScript & DOM Manipulation) ---

/**
 * Renders the contact container based on the current view mode and filtered list.
 * @param {Array} displayContacts - The list of contacts to display.
 */
function renderContacts(displayContacts = contacts) {
    const container = document.getElementById('contact-container');
    const emptyState = document.getElementById('empty-state');
    container.innerHTML = '';

    // Show empty state if no contacts match the filter
    if (displayContacts.length === 0) {
        container.className = '';
        emptyState.classList.remove('hidden');
        return;
    }
    emptyState.classList.add('hidden');

    // Apply responsive grid or list layout
    if (currentViewMode === 'grid') {
        // Responsive Grid Layout
        container.className = 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6';
    } else {
        // List Layout (Default)
        container.className = 'space-y-4';
    }

    displayContacts.forEach((contact, index) => {
        const contactElement = currentViewMode === 'grid'
            ? createGridCard(contact)
            : createListRow(contact);
        // Add a slight delay for the fade-in animation
        contactElement.style.animationDelay = `${index * 0.05}s`;
        container.appendChild(contactElement);
    });

    // Re-render Lucide icons after DOM update
    lucide.createIcons();
}

/**
 * Creates a single contact row element for the list view.
 */
function createListRow(contact) {
    const row = document.createElement('div');
    row.className = 'contact-fade-in contact-row flex flex-col sm:flex-row items-start sm:items-center bg-gray-800 p-4 rounded-xl shadow-lg border-l-4 border-primary transition duration-300 hover:shadow-xl hover:border-indigo-500';
    row.innerHTML = `
        <div class="flex-grow min-w-0 mb-3 sm:mb-0">
            <p class="text-lg font-semibold text-white truncate">${contact.name}</p>
            <div class="text-sm text-gray-400 flex flex-wrap gap-x-4">
                <span class="flex items-center"><i data-lucide="mail" class="w-4 h-4 mr-1 text-indigo-400"></i> <span class="truncate">${contact.email}</span></span>
                <span class="flex items-center"><i data-lucide="phone" class="w-4 h-4 mr-1 text-indigo-400"></i> ${contact.phone || 'N/A'}</span>
                ${contact.company ? `<span class="flex items-center"><i data-lucide="building" class="w-4 h-4 mr-1 text-indigo-400"></i> <span class="truncate">${contact.company}</span></span>` : ''}
            </div>
        </div>
        <!-- Action Buttons -->
        <div class="flex space-x-2 mt-2 sm:mt-0 sm:ml-4">
            ${contact.phone ? `<a href="tel:${contact.phone}" title="Call Contact" class="p-2 text-green-400 rounded-full hover:bg-gray-700 transition"><i data-lucide="phone" class="w-5 h-5"></i></a>` : ''}
            <button onclick="openContactModal('${contact.id}')" title="Edit Contact"
                    class="p-2 text-indigo-300 rounded-full hover:bg-gray-700 transition">
                <i data-lucide="square-pen" class="w-5 h-5"></i>
            </button>
            <button onclick="confirmDelete('${contact.id}', '${contact.name}')" title="Delete Contact"
                    class="p-2 text-red-400 rounded-full hover:bg-gray-700 transition">
                <i data-lucide="trash-2" class="w-5 h-5"></i>
            </button>
        </div>
    `;
    return row;
}

/**
 * Creates a single contact card element for the grid view.
 */
function createGridCard(contact) {
    const card = document.createElement('div');
    card.className = 'contact-fade-in contact-card bg-gray-800 p-6 rounded-xl shadow-lg flex flex-col transition duration-300 hover:shadow-2xl border border-gray-700 hover:border-primary';
    card.innerHTML = `
        <div class="flex items-center justify-between mb-4">
            <i data-lucide="user-circle" class="w-10 h-10 text-primary"></i>
            <div class="flex space-x-2">
                ${contact.phone ? `<a href="tel:${contact.phone}" title="Call Contact" class="p-1 text-green-400 rounded-full hover:bg-gray-700 transition"><i data-lucide="phone" class="w-5 h-5"></i></a>` : ''}
                <button onclick="openContactModal('${contact.id}')" title="Edit Contact"
                        class="p-1 text-indigo-300 rounded-full hover:bg-gray-700 transition">
                    <i data-lucide="square-pen" class="w-5 h-5"></i>
                </button>
                <button onclick="confirmDelete('${contact.id}', '${contact.name}')" title="Delete Contact"
                        class="p-1 text-red-400 rounded-full hover:bg-gray-700 transition">
                    <i data-lucide="trash-2" class="w-5 h-5"></i>
                </button>
            </div>
        </div>
        <p class="text-xl font-bold mb-2 text-white truncate">${contact.name}</p>
        <div class="space-y-2 text-sm text-gray-300 flex-grow">
            <p class="flex items-center"><i data-lucide="mail" class="w-4 h-4 mr-2 text-indigo-400"></i> <span class="truncate">${contact.email}</span></p>
            <p class="flex items-center"><i data-lucide="phone" class="w-4 h-4 mr-2 text-indigo-400"></i> ${contact.phone || 'N/A'}</p>
            ${contact.company ? `<p class="flex items-center"><i data-lucide="building" class="w-4 h-4 mr-2 text-indigo-400"></i> <span class="truncate">${contact.company}</span></p>` : ''}
        </div>
    `;
    return card;
}

/**
 * Handles the form submission for both adding and editing contacts.
 * @param {Event} event - The form submission event.
 */
document.getElementById('contact-form').onsubmit = async (event) => {
    event.preventDefault();

    const id = document.getElementById('contact-id').value;
    const name = document.getElementById('name').value;
    const email = document.getElementById('email').value;
    const phone = document.getElementById('phone').value;
    const company = document.getElementById('company').value;

    const contactData = { name, email, phone, company };

    try {
        if (id) {
            // Update operation (CRUD: Update)
            await apiUpdateContact({ ...contactData, id });
            console.log(`Updated contact ID: ${id}`);
        } else {
            // Create operation (CRUD: Create)
            await apiAddContact(contactData);
            console.log('Added new contact.');
        }

        closeContactModal();
        filterContacts(); // Re-render the UI with new data
    } catch (error) {
        console.error("Failed to save contact:", error);
        alert("Error saving contact. Check console for details.");
    }
};

/**
 * Opens the modal for adding a new contact or editing an existing one.
 * @param {string} [contactId] - The ID of the contact to edit, if any.
 */
async function openContactModal(contactId = null) {
    const modal = document.getElementById('contact-modal');
    const form = document.getElementById('contact-form');
    const title = document.getElementById('modal-title');

    form.reset();
    document.getElementById('contact-id').value = '';

    if (contactId) {
        // Edit Mode
        const contact = contacts.find(c => c.id === contactId);
        if (contact) {
            title.textContent = `Edit Contact: ${contact.name}`;
            document.getElementById('contact-id').value = contact.id;
            document.getElementById('name').value = contact.name;
            document.getElementById('email').value = contact.email;
            document.getElementById('phone').value = contact.phone;
            document.getElementById('company').value = contact.company;
        }
    } else {
        // Add Mode
        title.textContent = 'Add New Contact';
    }

    modal.classList.remove('hidden');
    modal.classList.add('flex');
}

/**
 * Closes the modal. Prevents closing if the click target is within the modal content.
 */
function closeContactModal(event) {
    if (!event || event.target.id === 'contact-modal') {
        const modal = document.getElementById('contact-modal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');
    }
}

/**
 * Prompts the user to confirm deletion and performs the delete operation. (CRUD: Delete)
 */
async function confirmDelete(id, name) {
    // Using an in-app confirmation message instead of alert/confirm
    if (window.confirm(`Are you sure you want to delete contact for ${name}? This action cannot be undone.`)) {
         try {
            await apiDeleteContact(id);
            console.log(`Deleted contact ID: ${id}`);
            filterContacts(); // Re-render the UI
        } catch (error) {
            console.error("Failed to delete contact:", error);
            alert("Error deleting contact. Check console for details.");
        }
    }
}

/**
 * Filters contacts based on the search input value. (Advanced Filtering)
 */
function filterContacts() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const filtered = contacts.filter(contact =>
        contact.name.toLowerCase().includes(searchTerm) ||
        contact.email.toLowerCase().includes(searchTerm) ||
        contact.company.toLowerCase().includes(searchTerm) ||
        contact.phone.toLowerCase().includes(searchTerm)
    );
    renderContacts(filtered);
}

/**
 * Sets the view mode (list/grid) and updates the button styling.
 * @param {string} mode - 'list' or 'grid'.
 */
function setViewMode(mode) {
    currentViewMode = mode;
    const listViewBtn = document.getElementById('list-view-btn');
    const gridViewBtn = document.getElementById('grid-view-btn');

    if (mode === 'list') {
        listViewBtn.classList.add('bg-primary', 'text-white');
        listViewBtn.classList.remove('hover:bg-gray-600', 'text-gray-400');

        gridViewBtn.classList.remove('bg-primary', 'text-white');
        gridViewBtn.classList.add('hover:bg-gray-600', 'text-gray-400');
    } else {
        gridViewBtn.classList.add('bg-primary', 'text-white');
        gridViewBtn.classList.remove('hover:bg-gray-600', 'text-gray-400');

        listViewBtn.classList.remove('bg-primary', 'text-white');
        listViewBtn.classList.add('hover:bg-gray-600', 'text-gray-400');
    }
    renderContacts(contacts);
}


// --- Initialization ---

window.onload = async () => {
    console.log('Application Initialized');
    await fetchContacts(); // Load initial data
    setViewMode(currentViewMode); // Render with initial view mode
};

// Optional: Listen for 'Esc' key press to close modal
document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && !document.getElementById('contact-modal').classList.contains('hidden')) {
        closeContactModal();
    }
});